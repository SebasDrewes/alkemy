{"version":3,"sources":["components/LoginForm/LoginForm.js"],"names":["userPrueba","user","email","role","token","admiPrueba","LoginForm","useHistory","useState","loginSuccess","setLoginSuccess","dispatch","useDispatch","useSelector","state","auth","isAuthenticated","style","width","maxWidth","margin","variant","initialValues","password","validationSchema","yup","required","min","matches","onSubmit","formdata","options","trim","loginExample","window","location","pathname","resetForm","handleChange","container","direction","sm","display","flexDirection","justifyContent","alignItems","item","className","fullWidth","as","TextField","type","name","id","label","onChange","component","color"],"mappings":"uQAgBMA,EAAa,CACjBC,KAAM,aACNC,MAAO,wBACPC,KAAM,OACNC,MAAO,oCAEHC,EAAa,CACjBJ,KAAM,aACNC,MAAO,mBACPC,KAAM,OACNC,MAAO,oCAiHME,UA9GG,WACFC,uBAAd,IAEA,EAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAWC,cACJC,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKC,mBAC/C,OACE,sBAAKC,MAAO,CAAEC,MAAO,MAAOC,SAAU,QAASC,OAAQ,YAAvD,UACE,cAAC,IAAD,CAAYC,QAAQ,KAApB,mBAEA,cAAC,IAAD,CACEC,cAAe,CAAEpB,MAAO,GAAIqB,SAAU,IAEtCC,iBAAkBC,IAAW,CAC3BvB,MAAOuB,MAEJvB,MAAM,6BACNwB,SAAS,wCAEZH,SAAUE,MAEPE,IAAI,EAAG,uCACPC,QAAQ,WAAY,oCACpBA,QAAQ,QAAS,mCACjBA,QAAQ,KAAM,0CACdF,SAAS,kDAEdG,SAAU,SAACC,EAAUC,GACfD,EAAS5B,MAAM8B,SAAWhC,EAAWE,OACvCS,EAASsB,YAAajC,IAEpB8B,EAAS5B,MAAM8B,SAAW3B,EAAWH,QACvCS,EAASsB,YAAa5B,IACtB6B,OAAOC,SAASC,SAAW,eAE7B1B,EAAgBoB,GAChBC,EAAQM,aA1BZ,SA8BG,gBAAGC,EAAH,EAAGA,aAAH,OACC,cAAC,IAAD,UACE,eAAC,IAAD,CAAMC,WAAS,EAACC,UAAU,SAA1B,UAEE,cAAC,IAAD,CACEC,GAAI,GACJxB,MAAO,CACLyB,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,YAGhB,cAAC,IAAD,CAAMC,MAAI,EAACL,GAAI,GAAIM,UAAU,YAA7B,SACE,eAAC,IAAD,CAAaC,WAAS,EAAtB,UACE,cAAC,IAAD,CACEC,GAAIC,IACJC,KAAK,OACLC,KAAK,QACLC,GAAG,QACHC,MAAM,QACNjC,QAAQ,WACRkC,SAAUjB,IAEZ,cAAC,IAAD,CACEc,KAAK,QACLI,UAAU,OACVT,UAAU,eAKhB,cAAC,IAAD,CAAMD,MAAI,EAACL,GAAI,GAAIM,UAAU,YAA7B,SACE,eAAC,IAAD,CAAaC,WAAS,EAAtB,UACE,cAAC,IAAD,CACEC,GAAIC,IACJC,KAAK,WACLC,KAAK,WACLC,GAAG,WACHC,MAAM,gBACNjC,QAAQ,WACRkC,SAAUjB,IAEZ,cAAC,IAAD,CACEc,KAAK,WACLI,UAAU,OACVT,UAAU,eAKhB,eAAC,IAAD,CAAMD,MAAI,EAACL,GAAI,GAAIM,UAAU,YAA7B,UACE,cAAC,IAAD,CACEI,KAAK,SACL9B,QAAQ,YACRoC,MAAM,YACNT,WAAS,EAJX,oBAQCvC,GAAgB,cAAC,IAAD,UAAa","file":"static/js/33.8f96ffab.chunk.js","sourcesContent":["import { ErrorMessage, Formik, Form, Field } from \"formik\";\nimport React, { useState } from \"react\";\nimport * as yup from \"yup\";\nimport \"./LoginForm.scss\";\nimport {\n  Button,\n  FormControl,\n  FormHelperText,\n  Grid,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { loginExample } from \"../../app/auth/authReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nconst userPrueba = {\n  user: \"juan perez\",\n  email: \"juanperez23@gmail.com\",\n  role: \"user\",\n  token: \"YDutwpNXFQo5aejZ0GCfXWpH7rCXlXO1\",\n};\nconst admiPrueba = {\n  user: \"hann gomez\",\n  email: \"hann23@gmail.com\",\n  role: \"admi\",\n  token: \"YDutwpNXFQo5aejZ0GCfXWpH7rCXlXO1\",\n};\n\nconst LoginForm = () => {\n  let history = useHistory();\n  // the object with the information will be saved in loginSucces\n  const [loginSuccess, setLoginSuccess] = useState(null);\n  const dispatch = useDispatch();\n  const auth = useSelector((state) => state.auth.isAuthenticated);\n  return (\n    <div style={{ width: \"90%\", maxWidth: \"300px\", margin: \"0px auto\" }}>\n      <Typography variant=\"h4\">Login</Typography>\n\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        // validation with YUP\n        validationSchema={yup.object({\n          email: yup\n            .string()\n            .email(\"Introduce un email valido\")\n            .required(\"No puedes dejar el campo email vacio\"),\n\n          password: yup\n            .string()\n            .min(6, \"Debe contener al menos 6 caracteres\")\n            .matches(/[a-zA-Z]/, \"Debe contener al menos una letra\")\n            .matches(/[0-9]/, \"Debe contener al menos 1 Digito\")\n            .matches(/\\W/, \"Debe contener al menos 1 simbolo(#@-/)\")\n            .required(\"No puedes dejar el campo contraseña vacio\"),\n        })}\n        onSubmit={(formdata, options) => {\n          if (formdata.email.trim() === userPrueba.email) {\n            dispatch(loginExample(userPrueba));\n          }\n          if (formdata.email.trim() === admiPrueba.email) {\n            dispatch(loginExample(admiPrueba));\n            window.location.pathname = \"/backoffice\";\n          }\n          setLoginSuccess(formdata); // if everything is fine.\n          options.resetForm(); // clean form\n        }}\n      >\n        {/* Render Form */}\n        {({ handleChange }) => (\n          <Form>\n            <Grid container direction=\"column\">\n              {/* EMAIL */}\n              <Grid\n                sm={12}\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              ></Grid>\n              <Grid item sm={12} className=\"marginTop\">\n                <FormControl fullWidth>\n                  <Field\n                    as={TextField}\n                    type=\"text\"\n                    name=\"email\"\n                    id=\"email\"\n                    label=\"Email\"\n                    variant=\"outlined\"\n                    onChange={handleChange}\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"span\"\n                    className=\"error\"\n                  />\n                </FormControl>\n              </Grid>\n              {/* PASSWORD */}\n              <Grid item sm={12} className=\"marginTop\">\n                <FormControl fullWidth>\n                  <Field\n                    as={TextField}\n                    type=\"password\"\n                    name=\"password\"\n                    id=\"password\"\n                    label=\"Contraseña\"\n                    variant=\"outlined\"\n                    onChange={handleChange}\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"span\"\n                    className=\"error\"\n                  />\n                </FormControl>\n              </Grid>\n              {/* SUBMIT */}\n              <Grid item sm={12} className=\"marginTop\">\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  fullWidth\n                >\n                  Entrar\n                </Button>\n                {loginSuccess && <Typography>{\"logeado (Prueba)\"}</Typography>}\n              </Grid>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default LoginForm;\n"],"sourceRoot":""}